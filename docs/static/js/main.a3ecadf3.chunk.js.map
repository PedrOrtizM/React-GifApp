{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifItem.js","components/GridGif.js","hooks/useFetchGif.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","c","onChange","value","target","type","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifItem","className","src","alt","GridGif","loading","state","setState","useEffect","then","useFetchGif","gif","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,uBAAMC,SAVK,SAACC,GAEZA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAC,OAAMP,GAAN,mBAAoBO,OACnCN,EAAc,MAIlB,UACI,uBAAOO,SAbK,SAAC,GAAD,IAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BR,EAAcQ,IAavBE,KAAK,OAAOF,MAAOT,IACjD,wBAAQW,KAAK,SAAb,yB,+BCpBCC,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACZC,EAAM,0CAA0CC,UAAUH,GAAU,qDADxD,SAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGKA,EAAKC,OAHV,uBAGVC,EAHU,EAGVA,KACFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAChC,MAAO,CAAEF,KAAIC,QAAOT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QALpC,kBAOXM,GAPW,4CAAH,sDCANM,EAAU,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAG3B,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,6BAAKA,QCJJO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EAGXd,mBAAS,CAAEiC,SAAS,EAAMZ,KAAM,KAHrB,mBAG9Ba,EAH8B,KAGvBC,EAHuB,KAarC,OARAC,qBAAU,WAENvB,EAAOC,GAAUuB,MAAK,SAACf,GACnBa,EAAS,CAAEd,KAAMC,EAAMW,SAAS,SAGrC,CAACnB,IAEGoB,EDRiBI,CAAYxB,GAA7BO,EAH8B,EAG9BA,KAAKY,EAHyB,EAGzBA,QAEZ,OACI,qCACI,mCAAMnB,EAAN,OACEmB,GAAW,8CAEb,oBAAIJ,UAAU,mDAAd,SAEQR,EAAKE,KAAI,SAACgB,GAAD,OAEL,aADA,CACC,EAAD,eAA2BA,GAAbA,EAAIf,aEd7BgB,EAAS,WAAO,IAAD,EAEYxC,mBAAS,IAFrB,mBAEjByC,EAFiB,KAEL1C,EAFK,KAQxB,OACI,qCACI,wCACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEI0C,EACClB,KAAI,SAAAf,GAAC,OAAK,cAAC,EAAD,CAASM,SAAUN,GAASA,YCfvDkC,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,eAAe,W","file":"static/js/main.a3ecadf3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const inputChange = ({ target: { value } }) => setInputValue(value)\n\n    const submit = (event) => {\n\n        event.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(c => [ inputValue,...c]);\n            setInputValue('');\n        }\n    }\n    return (\n        <form onSubmit={submit}>\n            <input onChange={inputChange} type=\"text\" value={inputValue} />\n            <button type=\"submit\">Agregar</button>\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGif = async ( category ) => {\n    const url = 'https://api.giphy.com/v1/gifs/search?q='+encodeURI(category)+'&limit=10&api_key=b2eay4Ra4r6snWK3t5CLpxslc0GNYnry'\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(({ id, title, images }) => {\n        return { id, title, url: images?.downsized_medium.url }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifItem = ({title,url}) => {\n\n    \n    return (\n        <div className=\"card animate__animated animate__fadeIn\" >\n            <img src={url} alt={title} />\n            <h3>{title}</h3>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif';\nimport { GifItem } from './GifItem';\n\nexport const GridGif = ({ category }) => {\n\n\n    const {data,loading}  = useFetchGif(category);\n\n    return (\n        <>\n            <h3> {category} </h3>\n            { loading && <p> Cargando... </p>}\n            \n            <ol className=\"card-container animate__animated animate__fadeIn\">\n                {\n                    data.map((gif) =>\n                        //  <GifItem key={ gif.id } gif= { gif }/>\n                        <GifItem key={gif.id } {...gif} /> // {... gif } manda cada uno de los atributos como un props independiente\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGif } from \"../helpers/getGif\";\nexport const useFetchGif = (category) => {\n\n\n    const [state, setState] = useState({ loading: true, data: [] });\n\n    useEffect(() => {\n        \n        getGif(category).then((gifs) => {\n            setState({ data: gifs, loading: false });\n        });\n\n    }, [category]); // array de dependecias, si la category cambia se vuelve a ejecutar el useEffect\n\n    return state;\n\n\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GridGif } from './components/GridGif';\n\nexport const GifApp = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    // const addCategory = ()=>{\n    //     setCategories([...categories,'Super Campeones']);\n    // }\n\n    return (\n        <>\n            <h2>GifAPP</h2>\n            <hr />\n            <AddCategory setCategories={ setCategories }/>\n            <ol>\n                {\n                categories\n                .map(c =>  <GridGif category={c} key={ c } /> )\n                }\n            </ol>\n\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifApp } from './GifApp';\n\nReactDOM.render(<GifApp />, document.getElementById('root'));\n"],"sourceRoot":""}